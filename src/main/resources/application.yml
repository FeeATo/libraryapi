spring:
  application:
    name: libraryapi
#  profiles: esse cara está comentado porque estamos usando variável de ambiente
#    active: production
  datasource:
    #quer dizer que se não vier variável de ambiente, vai colocar o valor padrão dps dos dois pontos
    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5432/library}
    username: ${DATASOURCE_USERNAME:postgres}
    password: ${DATASOURCE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true
    hibernate:
#      ddl-auto: update #só usar isso pra estudo
      ddl-auto: none
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_LINUX}
logging:
  file:
    #esse cara coloca os logs do console no arquivo app.log
    name: app.log
  level:
    #Esses são os níveis de log, do mais abrangente para o mais restritivo: trace; debug; info; warn; error.
#    root: warn
    org: #esse aqui org.springframework.web é o pacote, nesse caso o nível de log dele será debug
      springframework:
        web: debug
        security: trace
    io:
      github:
        feeato:
          libraryapi:
            controller: trace
management:
  server:
    port: 9090
  endpoints:
    web:
      exposure:
        include: '*'
server:
  servlet:
    context-path: /libraryapi
#  port: 8080



# Esse cara a seguir faz com que todos os profiles fiquem em um mesmo arquivo.

############
# production
---
spring:
  config:
    activate:
      on-profile: production
  jpa:
    show-sql: false
